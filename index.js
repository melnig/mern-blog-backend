import express from "express"; // –Ü–º–ø–æ—Ä—Ç—É—î–º–æ Express ‚Äî —Ñ—Ä–µ–π–º–≤–æ—Ä–∫ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–µ—Ä–≤–µ—Ä—ñ–≤ –Ω–∞ Node.js
import mongoose from "mongoose"; // –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ mongoose ‚Äî ORM –¥–ª—è MongoDB (—Ä–æ–±–æ—Ç–∞ –∑ –±–∞–∑–æ—é —è–∫ –∑ –æ–±‚Äô—î–∫—Ç–∞–º–∏)
import multer from "multer";
import cors from "cors";
// –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –Ω–∞–±—ñ—Ä –ø—Ä–∞–≤–∏–ª –¥–ª—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –ø–æ–ª—ñ–≤ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
import {
  registerValidator,
  loginValidator,
  postCreateValidator,
} from "./validations.js";

import { handleValidationErrors, checkAuth } from "./utils/index.js";
import { UserController, PostController } from "./controllers/index.js";

// –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MongoDB —á–µ—Ä–µ–∑ mongoose
mongoose
  .connect("mongodb+srv://admin:Melya0206@cluster0.2irhueo.mongodb.net/blog") // üîê URI –¥–æ MongoDB Atlas
  .then(() => console.log("DB ok!")) // –Ø–∫—â–æ –∑'—î–¥–Ω–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–µ ‚Äî –ª–æ–≥
  .catch((err) => console.log("DB error", err)); // –Ø–∫—â–æ –ø–æ–º–∏–ª–∫–∞ ‚Äî –ª–æ–≥ –ø–æ–º–∏–ª–∫–∏

const app = express(); // –°—Ç–≤–æ—Ä—é—î–º–æ –µ–∫–∑–µ–º–ø–ª—è—Ä Express-–¥–æ–¥–∞—Ç–∫—É

const storage = multer.diskStorage({
  destination: (_, __, cb) => {
    cb(null, "uploads");
  },
  filename: (_, file, cb) => {
    cb(null, file.originalname);
  },
});

const upload = multer({ storage });

app.use(express.json()); // –î–æ–¥–∞—î–º–æ middleware, —â–æ–± Express –º—ñ–≥ —á–∏—Ç–∞—Ç–∏ JSON –∑ —Ç—ñ–ª–∞ –∑–∞–ø–∏—Ç—ñ–≤
app.use("/uploads", express.static("uploads"));
app.use(
  cors({
    origin: "http://localhost:3000", // ‚Üê –¥–æ–∑–≤–æ–ª–∏—Ç–∏ —Ç—ñ–ª—å–∫–∏ React-–¥–æ–¥–∞—Ç–∫—É
  })
);

app.post(
  "/auth/login",
  loginValidator,
  handleValidationErrors,
  UserController.login
); // –û–±—Ä–æ–±–Ω–∏–∫ –º–∞—Ä—à—Ä—É—Ç—É –¥–ª—è –≤—Ö–æ–¥—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
app.post(
  "/auth/register",
  registerValidator,
  handleValidationErrors,
  UserController.register
); // –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (POST-–∑–∞–ø–∏—Ç)
app.get("/auth/me", checkAuth, UserController.getMe); // –û–±—Ä–æ–±–Ω–∏–∫ GET-–∑–∞–ø–∏—Ç—É –∑–∞ –º–∞—Ä—à—Ä—É—Ç–æ–º /auth/me || checkAuth ‚Äî middleware, —è–∫–∏–π –ø–µ—Ä–µ–≤—ñ—Ä—è—î JWT —ñ –¥–æ–¥–∞—î req.userId

app.post("/upload", checkAuth, upload.single("image"), (req, res) => {
  res.json({
    url: `/uploads/${req.file.originalname}`,
  });
});

app.get("/tags", PostController.getLastTags); //–û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ —Ç–µ–≥–∏

app.get("/posts", PostController.getAll); //–û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –ø–æ—Å—Ç–∏
app.get("/posts/tags", PostController.getLastTags); //–û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –ø–æ—Å—Ç–∏
app.get("/posts/:id", PostController.getOne); // –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Å—Ç –ø–æ ID
app.post(
  "/posts",
  checkAuth,
  postCreateValidator,
  handleValidationErrors,
  PostController.create
); // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞
app.delete("/posts/:id", checkAuth, PostController.remove); // –í–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ—Å—Ç–∞ –∑–∞ ID
app.patch(
  "/posts/:id",
  checkAuth,
  handleValidationErrors,
  PostController.update
); // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –≤ –ø–æ—Å—Ç—ñ –∑–∞ ID

// –ó–∞–ø—É—Å–∫–∞—î–º–æ —Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É 4444
app.listen(4444, (err) => {
  if (err) {
    return console.log(err); // –Ø–∫—â–æ –ø–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É ‚Äî –≤–∏–≤–µ—Å—Ç–∏ —ó—ó
  }
  console.log("Server OK!"); // –Ü–Ω–∞–∫—à–µ ‚Äî –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—à–Ω–∏–π –∑–∞–ø—É—Å–∫
});
